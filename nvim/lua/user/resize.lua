-- Code generated by ChatGPT to resize split size when
-- window resized or new split appears or disappears
--
-- I HAVE NO IDEA HOW THIS CODE CAN BE WRITTEN
--
-- Function to get the proportion of each window
local function get_split_proportions()
	local wins = vim.api.nvim_tabpage_list_wins(0)
	local total_width = vim.o.columns
	local total_height = vim.o.lines - vim.o.cmdheight

	local proportions = {}
	for _, win in ipairs(wins) do
		local width = vim.api.nvim_win_get_width(win)
		local height = vim.api.nvim_win_get_height(win)
		proportions[win] = { width / total_width, height / total_height }
	end

	return proportions
end

-- Function to resize splits based on proportions
local function resize_splits(proportions)
	local original_cmdheight = vim.o.cmdheight -- Store original cmdheight
	local wins = vim.api.nvim_tabpage_list_wins(0)
	local total_width = vim.o.columns
	local total_height = vim.o.lines - original_cmdheight -- Use original cmdheight

	local commands = {}

	for _, win in ipairs(wins) do
		local props = proportions[win]
		if props then
			local new_width = math.floor(props[1] * total_width)
			local new_height = math.floor(props[2] * total_height)

			-- Only resize if the new size is different from the current size
			if vim.api.nvim_win_get_width(win) ~= new_width then
				table.insert(commands, string.format("call nvim_win_set_width(%d, %d)", win, new_width))
			end
			if vim.api.nvim_win_get_height(win) ~= new_height then
				table.insert(commands, string.format("call nvim_win_set_height(%d, %d)", win, new_height))
			end
		end
	end

	if #commands > 0 then
		vim.cmd(table.concat(commands, " | "))
	end

	vim.o.cmdheight = original_cmdheight -- Restore original cmdheight
end

-- Create an autocommand group for resizing splits
local resize_group = vim.api.nvim_create_augroup("ProportionalSplits", { clear = true })

-- Store initial proportions
local proportions = get_split_proportions()

-- Auto-resize splits proportionally on VimResized
vim.api.nvim_create_autocmd("VimResized", {
	group = resize_group,
	pattern = "*",
	callback = function()
		resize_splits(proportions)
	end,
})

-- Update proportions when a new window is created
vim.api.nvim_create_autocmd("WinNew", {
	group = resize_group,
	pattern = "*",
	callback = function()
		proportions = get_split_proportions()
	end,
})

-- Update proportions when window is closed
vim.api.nvim_create_autocmd("WinClosed", {
	group = resize_group,
	pattern = "*",
	callback = function()
		proportions = get_split_proportions()
	end,
})

-- Re-apply proportions whenever a new split is created
vim.api.nvim_create_autocmd("WinNew", {
	group = resize_group,
	pattern = "*",
	callback = function()
		resize_splits(proportions)
	end,
})

-- Re-apply proportions whenever a split is closed
vim.api.nvim_create_autocmd("WinClosed", {
	group = resize_group,
	pattern = "*",
	callback = function()
		vim.defer_fn(function()
			resize_splits(proportions)
		end, 50)
	end,
})

-- Neotree-specific handling
-- Update proportions before Neotree opens
vim.api.nvim_create_autocmd("BufEnter", {
	group = resize_group,
	pattern = "Neotree*",
	callback = function()
		proportions = get_split_proportions()
	end,
})

-- Re-apply proportions after Neotree is closed
vim.api.nvim_create_autocmd("BufLeave", {
	group = resize_group,
	pattern = "Neotree*",
	callback = function()
		vim.defer_fn(function()
			resize_splits(proportions)
		end, 50)
	end,
})

-- force cmdheight = 1
vim.opt.cmdheight = 1
